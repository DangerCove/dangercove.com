<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tapetrap | Danger Cove]]></title>
  <link href="http://www.dangercove.com/blog/categories/tapetrap/atom.xml" rel="self"/>
  <link href="http://www.dangercove.com/"/>
  <updated>2015-08-24T11:27:56+02:00</updated>
  <id>http://www.dangercove.com/</id>
  <author>
    <name><![CDATA[Danger Cove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grab content from a web browser in your Mac app]]></title>
    <link href="http://www.dangercove.com/blog/2014/01/27/grab-content-from-a-web-browser-in-your-mac-app/"/>
    <updated>2014-01-27T15:43:00+01:00</updated>
    <id>http://www.dangercove.com/blog/2014/01/27/grab-content-from-a-web-browser-in-your-mac-app</id>
    <content type="html"><![CDATA[<p>One of my favorite features of <a href="http://www.dangercove.com/tapetrap">Tapetrap</a> is its ability to subscribe to a website while surfing the web with your browser. Instead of looking for the RSS feed manually and copy-pasting the link, you can click a button and Tapetrap will find and add the feed for you. In this article I want to go over why I think that's awesome and how it works. The source code for the URL grabbing is <a href="https://github.com/DangerCove/DCOURLGrabber">available on GitHub</a>.</p>

<div class="thumbnail">
<iframe width="620" height="349" src="http://www.dangercove.com//www.youtube.com/embed/zzoGEhWTXRw?rel=0&amp;vq=hd720" allowfullscreen></iframe>
<div class="caption">
Adding feeds from your web browser in Tapetrap
</div>
</div>




<!-- more -->


<h2>Not a browser plugin</h2>

<p>I've <a href="https://chrome.google.com/webstore/detail/treasure-chest-radio-3fm/geeoeokcenpaehoemkfdjfmnobopefck">made</a> and use a few browser extensions. They're neat little applications that take an insane amount of work to maintain. While some code can be shared you will need to tailer parts of the extension for each browser specifically.</p>

<p>For Tapetrap, I chose to make a system wide browser extension in the form of an icon in the menu bar that "just works" with the active web browser when clicked. This means users don't have to install anything extra and I don't have to create a plugin per browser. I can't say I'm the first one to do something like this, but it works particularly well for Tapetrap.</p>

<div class="thumbnail">
<img src="/images/content/tapetrap-ss-menubar.jpg" title="Add Feeds While Surfing the Web" alt="Add Feeds While Surfing the Web">
</div>


<p>Of course there are downsides to using this approach too. It's impossible to manipulate the DOM inside the browser or execute other more context aware methods. It's fine for getting basic information, though.</p>

<h2>How grabbing works</h2>

<p>This is where it gets a little technical. I combined a basic menu bar app with my own URL grabber code, called <a href="https://github.com/DangerCove/DCOURLGrabber">DCOURLGrabber</a>, to get the URL from the web browser that was last active.</p>

<p>I'll skip the menu bar icon part. There are plenty of <a href="http://kmikael.com/2013/07/01/simple-menu-bar-apps-for-os-x/">good tutorial</a>s that explain all you need. Instead I'll talk about how to interact with the web browser.</p>

<h3>AppleScript</h3>

<p>Yep, AppleScript. Often used to automate tedious tasks, it's also a great way to interface with other applications. For DCOURLGrabber I focussed on getting the URL from the selected tab of the key window of the web browser that was last active. This is the AppleScript for getting the URL in Google Chrome:</p>

<p><code>applescript Grab URL From Chrome https://github.com/DangerCove/DCOURLGrabber/raw/master/AppleScripts/com.google.Chrome.scpt
tell application "Google Chrome"
  get URL of active tab of first window
end tell
</code></p>

<p>Simple enough right? For <a href="https://github.com/DangerCove/DCOURLGrabber/tree/master/AppleScripts">Safari and Opera</a> the command are very similar. The one for Firefox is a little longer.</p>

<p><code>applescript Grab URL From Firefox https://github.com/DangerCove/DCOURLGrabber/raw/master/AppleScripts/org.mozilla.firefox.scpt
tell application "Firefox" to activate
tell application "System Events"
  keystroke "l" using command down
  keystroke "c" using command down
end tell
delay 0.5
the clipboard
</code></p>

<p>Hopefully they'll switch to a straightforward approach in a future update. In any case, after running these scripts they present the current URL of the browser window.</p>

<h3>Objective-C</h3>

<p>To run this in Objective-C, create a new Mac project in XCode, paste in the next piece of code in the <code>applicationDidFinishLaunching:</code> method and that's it.</p>

<p>``` objective-c Get URL From Chrome in Objective-C
// The script to run. You could also load this from a file as in DCOURLGrabber
NSString *chromeScript =
@"tell application \"Google Chrome\"\n"
"  get URL of active tab of first window\n"
"end tell";</p>

<p>// Load the script
NSAppleScript *script = [[NSAppleScript alloc] initWithSource:chromeScript];</p>

<p>// Grab URL using AppleScript
NSDictionary <em>scriptExecuteError;
NSAppleEventDescriptor </em>result = [script executeAndReturnError:&amp;scriptExecuteError];
if(scriptExecuteError) {</p>

<p>  // Failed
  NSLog(@"Error: %@", scriptExecuteError);</p>

<p>} else {</p>

<p>  NSLog(@"Output: %@", result.stringValue);</p>

<p>}
```</p>

<p>Using DCOURLGrabber it becomes even easier. Check the <a href="https://github.com/DangerCove/DCOURLGrabber">GitHub page</a> for more documentation.</p>

<p>``` objective-c Get URL From Chrome in Objective-C Using DCOURLGrabber
DCOURLGrabber <em>grabber = [[DCOURLGrabber alloc] init];
NSURL </em>url = [grabber grabURLFromBundleID:@"com.google.Chrome" withError:&amp;grabError];
if(grabError) {</p>

<pre><code>NSLog(@"Failed to retrieve URL: %@", grabError);
</code></pre>

<p>} else {</p>

<pre><code>NSLog(@"Got URL: %@", url.absoluteString);
</code></pre>

<p>}
```</p>

<h2>Getting the RSS/Atom URL</h2>

<p>Websites that value their feeds will link to it from their website. Not only with the well-known orange button, but also through a meta tag in the source code of the website. This gives apps like Tapetrap a way of retrieving it.</p>

<p>The GameKings website has this setup correctly. Inspecting the source of <a href="http://gamekings.tv">http://gamekings.tv</a> reveals the following lines near the top of the document.</p>

<p><code>
&lt;link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.gamekings.tv/feed/" /&gt;
&lt;link rel="alternate" type="text/xml" title="RSS .92" href="http://www.gamekings.tv/feed/rss/" /&gt;
&lt;link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://www.gamekings.tv/feed/atom/" /&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Gamekings Video's RSS Feed" href="http://www.gamekings.tv/rss?cat=3"&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Gamekings Nieuws RSS Feed" href="http://www.gamekings.tv/rss?cat=18"&gt;
</code></p>

<p>All links point to RSS feeds. There are some similarities between the lines. Using these conventions, it's easy to extract them in code. Even easier with <a href="https://github.com/tracy-e/OCGumbo">OCGumbo</a>, which is a HTML5 parser. It converts RSS into Objective-C objects.</p>

<p>The following lines of code parse a simple HTML page, check the 'type' parameter of the 'link' meta tag for either application/rss+xml, application/atom+xml, rss+xml or atom+xml and log the link when it matches.</p>

<p>``` objective-c Log the Link to a RSS Feed Found in the Head
// Create an array that contains the strings that can appear in the 'type' property
NSArray *linkTypeFeedIndicators = [NSArray arrayWithObjects:@"application/rss+xml", @"application/atom+xml", @"rss+xml", @"atom+xml", nil];</p>

<p>NSString *htmlString =
@"<html><head>"
"<link rel='alternate' type='application/rss+xml' title='RSS 2.0' href='http://www.gamekings.tv/feed/' />"
"</head><body>"
"<h1>Feed discovery experiment</h1>"
"<p>Just testing ;).</p>"
"</body></html>";</p>

<p>// Load the document from a string containing HTML
OCGumboDocument <em>document = [[OCGumboDocument alloc] initWithHTMLString:htmlString];
OCGumboElement </em>root = document.rootElement;</p>

<p>// Loop through all 'link' tags
[root.Query(@"link") enumerateObjectsUsingBlock:<sup>(OCGumboElement</sup> <em>element, NSUInteger idx, BOOL </em>stop) {</p>

<pre><code>NSString *type = [element.attr(@"type") stringByRemovingNewLinesAndWhitespace];

// Check if the type is equal to that of a RSS/Atom feed
if([linkTypeFeedIndicators containsObject:type]) {
    NSString *feedURLString = element.attr(@"href");
    NSLog(@"Found a feed: %@", feedURLString);
}
</code></pre>

<p>}];
```</p>

<p>With the URL of the RSS feed in hand, the road is clear to analyze its content using a RSS parser, or maybe use the URL for something different entirely.</p>

<h2>Real world example</h2>

<p>You can <a href="http://www.dangercove.com/tapetrap">download Tapetrap</a> to get a feel of how this works. The app is now in public beta and free to use. Also let me know what you think and help improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Love Watching Web Videos]]></title>
    <link href="http://www.dangercove.com/blog/2014/01/25/i-love-watching-web-videos/"/>
    <updated>2014-01-25T11:40:00+01:00</updated>
    <id>http://www.dangercove.com/blog/2014/01/25/i-love-watching-web-videos</id>
    <content type="html"><![CDATA[<div class="thumbnail">
<a href="http://www.dangercove.com/tapetrap"><img src="/images/content/tapetrap-header.jpg" title="Tapetrap Header" alt="Tapetrap Header"></a>
</div>


<p>Online videos are my favorite work break. I might watch an episode of Star Trek TNG during lunch, but I watch far more online videos while I wait for some stuff to compile or just to take my mind off what I'm doing.</p>

<p><a href="http://www.dangercove.com/tapetrap">Tapetrap</a> makes sure I spend less time searching and more time watching these videos. I use it daily and love how it works. Now I need your help to make it even better.</p>

<!-- more -->


<p>The videos I like to watch aren't available from a single website. YouTube has a lot, but definitly not everything. Maybe even less in the future, with the <a href="http://www.forbes.com/sites/insertcoin/2013/12/11/youtube-unleashes-strange-storm-of-copyright-claims-on-video-game-content-producers/">copyright claims</a> a lot of video game oriented channels had to deal with lately. I wanted to get away from browsing to every single website independently, deciding what I wanted to watch and then forgetting which clips I had already seen. Or making an account for every site to overcome that last problem.</p>

<div class="thumbnail">
<a href="http://www.dangercove.com/images/content/tapetrap-ss-browse.jpg" target="_blank"><img src="/images/content/tapetrap-ss-browse.jpg" title="Browsing in Tapetrap" alt="Browsing in Tapetrap"></a>
</div>


<p>Tapetrap will hold all my favorite sites, make it easy to add new ones, play videos and remembers which I've already seen. When I have 5-30 minutes to spare, it gives me a quick overview of what's available and ten seconds later I'm watching a video. I don't even have to check where I left off if it's a series. It's pretty awesome really.</p>

<p>Especially while Tapetrap's in beta, I'm looking for ways to improve the experience and add features. If you're like me and follow a bunch of skateboarding channels on YouTube, TED Talks, Funny or Die, Artsy Vimeo Channels, Spoony etc. etc., <a href="http://www.dangercove.com/tapetrap">download Tapetrap</a> and <a href="mailto:support@dangercove.com?subject=Tapetrap%20Feedback">let me know what you think</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep track of your web video feeds with Tapetrap]]></title>
    <link href="http://www.dangercove.com/blog/2013/10/21/keep-track-of-your-web-video-feeds-with-tapetrap/"/>
    <updated>2013-10-21T14:52:00+02:00</updated>
    <id>http://www.dangercove.com/blog/2013/10/21/keep-track-of-your-web-video-feeds-with-tapetrap</id>
    <content type="html"><![CDATA[<p>If you're anything like me, you spend quite some time reading, listening to and
watching various things online. It would be impossible to organize all this
information without the use of a few excellent apps, like Reeder for news
and Instacast for podcasts.</p>

<p>Web videos are harder to manage. Despite popular believe, not everything is
available on YouTube or Vimeo. In need of a dedicated tool to keep up with online videos,
no matter where they're hosted, I've made a brand new app!</p>

<!-- more -->




<div class="thumbnail">
<a href="http://www.dangercove.com/tapetrap/">
  <img src="/images/content/tapetrap-banner.jpg" title="Keep track of your web video feeds with Tapetrap" alt="Keep track of your web video feeds with Tapetrap">
</a>
</div>


<p>Tapetrap will give you instant access to your favorite webisodes, lets you know when
a new item comes out and keeps track of which you've seen.</p>

<p>For me, this means I can watch VICE, Zero Punctuation, the AVGN, Conan's
Clueless Gamer, the Spoony Experiment, Gamekings, Christopher Walkenthrough, TED talks and Uitzending
Gemist all in one app.</p>

<p>It's been in development for the past month and, not too tease you too much, is
working great! That said, it's not done yet. I still want to polish a
few features before putting out a public version. Until then, <a href="/tapetrap/">subscribe to the mailing list</a>
to stay up to date and help testing!</p>
]]></content>
  </entry>
  
</feed>
