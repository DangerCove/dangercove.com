<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | Danger Cove]]></title>
  <link href="http://www.dangercove.com/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://www.dangercove.com/"/>
  <updated>2015-08-24T11:27:56+02:00</updated>
  <id>http://www.dangercove.com/</id>
  <author>
    <name><![CDATA[Danger Cove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grab content from a web browser in your Mac app]]></title>
    <link href="http://www.dangercove.com/blog/2014/01/27/grab-content-from-a-web-browser-in-your-mac-app/"/>
    <updated>2014-01-27T15:43:00+01:00</updated>
    <id>http://www.dangercove.com/blog/2014/01/27/grab-content-from-a-web-browser-in-your-mac-app</id>
    <content type="html"><![CDATA[<p>One of my favorite features of <a href="http://www.dangercove.com/tapetrap">Tapetrap</a> is its ability to subscribe to a website while surfing the web with your browser. Instead of looking for the RSS feed manually and copy-pasting the link, you can click a button and Tapetrap will find and add the feed for you. In this article I want to go over why I think that's awesome and how it works. The source code for the URL grabbing is <a href="https://github.com/DangerCove/DCOURLGrabber">available on GitHub</a>.</p>

<div class="thumbnail">
<iframe width="620" height="349" src="http://www.dangercove.com//www.youtube.com/embed/zzoGEhWTXRw?rel=0&amp;vq=hd720" allowfullscreen></iframe>
<div class="caption">
Adding feeds from your web browser in Tapetrap
</div>
</div>




<!-- more -->


<h2>Not a browser plugin</h2>

<p>I've <a href="https://chrome.google.com/webstore/detail/treasure-chest-radio-3fm/geeoeokcenpaehoemkfdjfmnobopefck">made</a> and use a few browser extensions. They're neat little applications that take an insane amount of work to maintain. While some code can be shared you will need to tailer parts of the extension for each browser specifically.</p>

<p>For Tapetrap, I chose to make a system wide browser extension in the form of an icon in the menu bar that "just works" with the active web browser when clicked. This means users don't have to install anything extra and I don't have to create a plugin per browser. I can't say I'm the first one to do something like this, but it works particularly well for Tapetrap.</p>

<div class="thumbnail">
<img src="/images/content/tapetrap-ss-menubar.jpg" title="Add Feeds While Surfing the Web" alt="Add Feeds While Surfing the Web">
</div>


<p>Of course there are downsides to using this approach too. It's impossible to manipulate the DOM inside the browser or execute other more context aware methods. It's fine for getting basic information, though.</p>

<h2>How grabbing works</h2>

<p>This is where it gets a little technical. I combined a basic menu bar app with my own URL grabber code, called <a href="https://github.com/DangerCove/DCOURLGrabber">DCOURLGrabber</a>, to get the URL from the web browser that was last active.</p>

<p>I'll skip the menu bar icon part. There are plenty of <a href="http://kmikael.com/2013/07/01/simple-menu-bar-apps-for-os-x/">good tutorial</a>s that explain all you need. Instead I'll talk about how to interact with the web browser.</p>

<h3>AppleScript</h3>

<p>Yep, AppleScript. Often used to automate tedious tasks, it's also a great way to interface with other applications. For DCOURLGrabber I focussed on getting the URL from the selected tab of the key window of the web browser that was last active. This is the AppleScript for getting the URL in Google Chrome:</p>

<p><code>applescript Grab URL From Chrome https://github.com/DangerCove/DCOURLGrabber/raw/master/AppleScripts/com.google.Chrome.scpt
tell application "Google Chrome"
  get URL of active tab of first window
end tell
</code></p>

<p>Simple enough right? For <a href="https://github.com/DangerCove/DCOURLGrabber/tree/master/AppleScripts">Safari and Opera</a> the command are very similar. The one for Firefox is a little longer.</p>

<p><code>applescript Grab URL From Firefox https://github.com/DangerCove/DCOURLGrabber/raw/master/AppleScripts/org.mozilla.firefox.scpt
tell application "Firefox" to activate
tell application "System Events"
  keystroke "l" using command down
  keystroke "c" using command down
end tell
delay 0.5
the clipboard
</code></p>

<p>Hopefully they'll switch to a straightforward approach in a future update. In any case, after running these scripts they present the current URL of the browser window.</p>

<h3>Objective-C</h3>

<p>To run this in Objective-C, create a new Mac project in XCode, paste in the next piece of code in the <code>applicationDidFinishLaunching:</code> method and that's it.</p>

<p>``` objective-c Get URL From Chrome in Objective-C
// The script to run. You could also load this from a file as in DCOURLGrabber
NSString *chromeScript =
@"tell application \"Google Chrome\"\n"
"  get URL of active tab of first window\n"
"end tell";</p>

<p>// Load the script
NSAppleScript *script = [[NSAppleScript alloc] initWithSource:chromeScript];</p>

<p>// Grab URL using AppleScript
NSDictionary <em>scriptExecuteError;
NSAppleEventDescriptor </em>result = [script executeAndReturnError:&amp;scriptExecuteError];
if(scriptExecuteError) {</p>

<p>  // Failed
  NSLog(@"Error: %@", scriptExecuteError);</p>

<p>} else {</p>

<p>  NSLog(@"Output: %@", result.stringValue);</p>

<p>}
```</p>

<p>Using DCOURLGrabber it becomes even easier. Check the <a href="https://github.com/DangerCove/DCOURLGrabber">GitHub page</a> for more documentation.</p>

<p>``` objective-c Get URL From Chrome in Objective-C Using DCOURLGrabber
DCOURLGrabber <em>grabber = [[DCOURLGrabber alloc] init];
NSURL </em>url = [grabber grabURLFromBundleID:@"com.google.Chrome" withError:&amp;grabError];
if(grabError) {</p>

<pre><code>NSLog(@"Failed to retrieve URL: %@", grabError);
</code></pre>

<p>} else {</p>

<pre><code>NSLog(@"Got URL: %@", url.absoluteString);
</code></pre>

<p>}
```</p>

<h2>Getting the RSS/Atom URL</h2>

<p>Websites that value their feeds will link to it from their website. Not only with the well-known orange button, but also through a meta tag in the source code of the website. This gives apps like Tapetrap a way of retrieving it.</p>

<p>The GameKings website has this setup correctly. Inspecting the source of <a href="http://gamekings.tv">http://gamekings.tv</a> reveals the following lines near the top of the document.</p>

<p><code>
&lt;link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.gamekings.tv/feed/" /&gt;
&lt;link rel="alternate" type="text/xml" title="RSS .92" href="http://www.gamekings.tv/feed/rss/" /&gt;
&lt;link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://www.gamekings.tv/feed/atom/" /&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Gamekings Video's RSS Feed" href="http://www.gamekings.tv/rss?cat=3"&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Gamekings Nieuws RSS Feed" href="http://www.gamekings.tv/rss?cat=18"&gt;
</code></p>

<p>All links point to RSS feeds. There are some similarities between the lines. Using these conventions, it's easy to extract them in code. Even easier with <a href="https://github.com/tracy-e/OCGumbo">OCGumbo</a>, which is a HTML5 parser. It converts RSS into Objective-C objects.</p>

<p>The following lines of code parse a simple HTML page, check the 'type' parameter of the 'link' meta tag for either application/rss+xml, application/atom+xml, rss+xml or atom+xml and log the link when it matches.</p>

<p>``` objective-c Log the Link to a RSS Feed Found in the Head
// Create an array that contains the strings that can appear in the 'type' property
NSArray *linkTypeFeedIndicators = [NSArray arrayWithObjects:@"application/rss+xml", @"application/atom+xml", @"rss+xml", @"atom+xml", nil];</p>

<p>NSString *htmlString =
@"<html><head>"
"<link rel='alternate' type='application/rss+xml' title='RSS 2.0' href='http://www.gamekings.tv/feed/' />"
"</head><body>"
"<h1>Feed discovery experiment</h1>"
"<p>Just testing ;).</p>"
"</body></html>";</p>

<p>// Load the document from a string containing HTML
OCGumboDocument <em>document = [[OCGumboDocument alloc] initWithHTMLString:htmlString];
OCGumboElement </em>root = document.rootElement;</p>

<p>// Loop through all 'link' tags
[root.Query(@"link") enumerateObjectsUsingBlock:<sup>(OCGumboElement</sup> <em>element, NSUInteger idx, BOOL </em>stop) {</p>

<pre><code>NSString *type = [element.attr(@"type") stringByRemovingNewLinesAndWhitespace];

// Check if the type is equal to that of a RSS/Atom feed
if([linkTypeFeedIndicators containsObject:type]) {
    NSString *feedURLString = element.attr(@"href");
    NSLog(@"Found a feed: %@", feedURLString);
}
</code></pre>

<p>}];
```</p>

<p>With the URL of the RSS feed in hand, the road is clear to analyze its content using a RSS parser, or maybe use the URL for something different entirely.</p>

<h2>Real world example</h2>

<p>You can <a href="http://www.dangercove.com/tapetrap">download Tapetrap</a> to get a feel of how this works. The app is now in public beta and free to use. Also let me know what you think and help improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coucou for Web Developers]]></title>
    <link href="http://www.dangercove.com/blog/2013/03/29/coucou-for-web-developers/"/>
    <updated>2013-03-29T13:08:00+01:00</updated>
    <id>http://www.dangercove.com/blog/2013/03/29/coucou-for-web-developers</id>
    <content type="html"><![CDATA[<p>If you're a web developer you probably recognize that moment where you're running a local development evironment with MAMP/XAMPP, Rails or Node.js and need to see your site on another computer, or show someone else what you're working on. Maybe to do a cross-browser check, maybe just to show how awesome this latest design looks.</p>

<p>This usually involves copy-pasting of ip addresses, emailing and other such nonsense. With coucou this can be done in just a few simple clicks. Let me walk you through it.</p>

<p>First we need to enable broadcasting in the preferences pane.</p>

<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-preferences2.jpg" title="Enable broadcasting" alt="Enable broadcasting">
<div class="caption">
Enable broadcasting
</div>
</div>


<p>Now follow these steps:</p>

<!-- more -->


<ul>
<li>click the menu bar icon;</li>
<li>select Broadcast and click New Service...;</li>
<li>select one of the presets in the window that pops-up or create a service manually;</li>
<li>click publish and you're set!</li>
</ul>


<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-newservice.jpg" title="Add a new service" alt="Add a new service">
<div class="caption">
Add a new service
</div>
</div>




<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-rails.jpg" title="Find a custom service" alt="Find a custom service">
<div class="caption">
Your service is now visible for anyone using coucou, or any other Bonjour compatible app
</div>
</div>


<p>You can unpublish the service by clicking the corresponding entry in the Broadcast menu.</p>

<p><a href="https://itunes.apple.com/app/coucou/id620436774"><img src="/images/MacAppStore_download.png" title="Available on the Mac App Store" alt="Available on the Mac App Store"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coucou for easy network access]]></title>
    <link href="http://www.dangercove.com/blog/2013/03/29/coucou-for-easy-network-access/"/>
    <updated>2013-03-29T12:32:00+01:00</updated>
    <id>http://www.dangercove.com/blog/2013/03/29/coucou-for-easy-network-access</id>
    <content type="html"><![CDATA[<p>Network devices can broadcast various services, so other devices can find them. You've probably used this feature before without knowing about it. When you start a Screen Sharing session or browse some files on a network your computer picked up on what other computers in your network were broadcasting.</p>

<p>While its already pretty easy to find these services in Finder, wouldn't it be awesome if you could do this from your menu bar? Or connect to web servers, SSH, printers, see who's in and even create your own services? That's when you need coucou!</p>

<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-indicator.jpg" title="Coucou sits in your menu bar" alt="Coucou sits in your menu bar">
<div class="caption">
Coucou is out of your way but easy to reach
</div>
</div>




<!-- more -->




<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-menubar.jpg" title="See who's online" alt="See who's online">
<div class="caption">
See who's online and easily start Screen Sharing of File Sharing
</div>

</div>


<div class="thumbnail">
<img src="/images/adventures/coucou/screenshots/coucou-printer.jpg" title="Browse printers" alt="Browse printers">
<div class="caption">
Browse printers and open the web management page
</div>
</div>


<p>Are you a web developer? Check out <a href="/blog/2013/03/29/coucou-for-web-developers">this post</a> about using coucou to streamline local web development.</p>

<p><a href="https://itunes.apple.com/app/coucou/id620436774"><img src="/images/MacAppStore_download.png" title="Available on the Mac App Store" alt="Available on the Mac App Store"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launch at Login for sandboxed apps]]></title>
    <link href="http://www.dangercove.com/blog/2012/08/07/launch-at-login-for-sandboxed-apps/"/>
    <updated>2012-08-07T18:22:00+02:00</updated>
    <id>http://www.dangercove.com/blog/2012/08/07/launch-at-login-for-sandboxed-apps</id>
    <content type="html"><![CDATA[<p>"Launch at Login" was quite simple to implement. It even fits in a single gist: <a href="https://gist.github.com/1409312">gist.github.com/1409312</a>. Sandboxing changed this and made it "little" more troublesome.</p>

<p>Tim Schröder wrote <a href="http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/">a great article about this</a>, that combines very well with Alex Zielenski’s <a href="https://github.com/alexzielenski/StartAtLoginController">StartAtLoginController GitHub project</a> into a Helper Project that’ll allow you to easily add “Launch at login” to multiple Apps.</p>

<p>Tim’s example uses hardcoded information to launch the main App from the Helper App and toggle Launch at Login. Which makes it super easy to understand, but less flexible to use in multiple projects. That’s where Alex’ Controller comes in. It’ll allow you to add the Helper Project to your main Project, add a new target, drag it your main app’s “Copy Files” build phase and be done with it.</p>

<p><a href="http://stackoverflow.com/questions/11292058/how-to-add-a-sandboxed-app-to-the-login-items">This stackoverflow post</a> links to <a href="http://ge.tt/6DntY4K/v/0?c">a demo project</a> that has most of the code in place, but doesn’t use Tim’s pretty Workspace method of setting things up. I mixed them together and made a new GitHub project that should help you setup your project pretty quickly.</p>

<p>Check out the source: <a href="https://github.com/DangerCove/LaunchAtLogin">https://github.com/DangerCove/LaunchAtLogin</a></p>

<p>Oddities and things you should know:</p>

<p><blockquote><p>This will only work if your .app is in /Applications or ~/Applications, making it harder to debug.</p></p><p><p>Manually running the Helper App from the main App’s Contents folder will sometimes not launch the main app if ‘Launch at Startup’ hasn’t been activated for your app. So first run the app, check the checkbox and try again.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
